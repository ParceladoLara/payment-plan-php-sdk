/*! \file */
/*******************************************
 *                                         *
 *  File auto-generated by `::safer_ffi`.  *
 *                                         *
 *  Do not manually edit this file.        *
 *                                         *
 *******************************************/

#include <stddef.h>
#include <stdint.h>

#include <stdbool.h>

/** <No documentation available> */
typedef struct Params
{
    /** <No documentation available> */
    double requested_amount;

    /** <No documentation available> */
    int64_t first_payment_date_ms;

    /** <No documentation available> */
    int64_t disbursement_date_ms;

    /** <No documentation available> */
    uint32_t installments;

    /** <No documentation available> */
    uint16_t debit_service_percentage;

    /** <No documentation available> */
    double mdr;

    /** <No documentation available> */
    double tac_percentage;

    /** <No documentation available> */
    double iof_overall;

    /** <No documentation available> */
    double iof_percentage;

    /** <No documentation available> */
    double interest_rate;

    /** <No documentation available> */
    double min_installment_amount;

    /** <No documentation available> */
    double max_total_amount;

    /** <No documentation available> */
    bool disbursement_only_on_business_days;
} Params_t;

/** <No documentation available> */
typedef struct DownPaymentParams
{
    /** <No documentation available> */
    Params_t params;

    /** <No documentation available> */
    double requested_amount;

    /** <No documentation available> */
    double min_installment_amount;

    /** <No documentation available> */
    int64_t first_payment_date_ms;

    /** <No documentation available> */
    uint32_t installments;
} DownPaymentParams_t;

/** <No documentation available> */
typedef struct Invoice
{
    /** <No documentation available> */
    int64_t accumulated_days;

    /** <No documentation available> */
    double factor;

    /** <No documentation available> */
    double accumulated_factor;

    /** <No documentation available> */
    int64_t due_date_ms;
} Invoice_t;

/** \brief
 *  Same as [`Vec<T>`][`rust::Vec`], but with guaranteed `#[repr(C)]` layout
 */
typedef struct Vec_Invoice
{
    /** <No documentation available> */
    Invoice_t *ptr;

    /** <No documentation available> */
    size_t len;

    /** <No documentation available> */
    size_t cap;
} Vec_Invoice_t;

/** <No documentation available> */
typedef struct Response
{
    /** <No documentation available> */
    uint32_t installment;

    /** <No documentation available> */
    int64_t due_date_ms;

    /** <No documentation available> */
    int64_t disbursement_date_ms;

    /** <No documentation available> */
    int64_t accumulated_days;

    /** <No documentation available> */
    double days_index;

    /** <No documentation available> */
    double accumulated_days_index;

    /** <No documentation available> */
    double interest_rate;

    /** <No documentation available> */
    double installment_amount;

    /** <No documentation available> */
    double installment_amount_without_tac;

    /** <No documentation available> */
    double total_amount;

    /** <No documentation available> */
    double debit_service;

    /** <No documentation available> */
    double customer_debit_service_amount;

    /** <No documentation available> */
    double customer_amount;

    /** <No documentation available> */
    double calculation_basis_for_effective_interest_rate;

    /** <No documentation available> */
    double merchant_debit_service_amount;

    /** <No documentation available> */
    double merchant_total_amount;

    /** <No documentation available> */
    double settled_to_merchant;

    /** <No documentation available> */
    double mdr_amount;

    /** <No documentation available> */
    double effective_interest_rate;

    /** <No documentation available> */
    double total_effective_cost;

    /** <No documentation available> */
    double eir_yearly;

    /** <No documentation available> */
    double tec_yearly;

    /** <No documentation available> */
    double eir_monthly;

    /** <No documentation available> */
    double tec_monthly;

    /** <No documentation available> */
    double total_iof;

    /** <No documentation available> */
    double contract_amount;

    /** <No documentation available> */
    double contract_amount_without_tac;

    /** <No documentation available> */
    double tac_amount;

    /** <No documentation available> */
    double iof_percentage;

    /** <No documentation available> */
    double overall_iof;

    /** <No documentation available> */
    double pre_disbursement_amount;

    /** <No documentation available> */
    double paid_total_iof;

    /** <No documentation available> */
    double paid_contract_amount;

    /** <No documentation available> */
    Vec_Invoice_t invoices;
} Response_t;

/** \brief
 *  Same as [`Vec<T>`][`rust::Vec`], but with guaranteed `#[repr(C)]` layout
 */
typedef struct Vec_Response
{
    /** <No documentation available> */
    Response_t *ptr;

    /** <No documentation available> */
    size_t len;

    /** <No documentation available> */
    size_t cap;
} Vec_Response_t;

/** <No documentation available> */
typedef struct DownPaymentResponse
{
    /** <No documentation available> */
    double installment_amount;

    /** <No documentation available> */
    double total_amount;

    /** <No documentation available> */
    uint32_t installment_quantity;

    /** <No documentation available> */
    int64_t first_payment_date_ms;

    /** <No documentation available> */
    Vec_Response_t plans;
} DownPaymentResponse_t;

/** \brief
 *  Same as [`Vec<T>`][`rust::Vec`], but with guaranteed `#[repr(C)]` layout
 */
typedef struct Vec_DownPaymentResponse
{
    /** <No documentation available> */
    DownPaymentResponse_t *ptr;

    /** <No documentation available> */
    size_t len;

    /** <No documentation available> */
    size_t cap;
} Vec_DownPaymentResponse_t;

/** <No documentation available> */
/** \remark Has the same ABI as `uint8_t` **/
#ifdef DOXYGEN
typedef
#endif
    enum PaymentPlanResult
{
    /** <No documentation available> */
    PAYMENT_PLAN_RESULT_SUCCESS = 0,
    /** <No documentation available> */
    PAYMENT_PLAN_RESULT_INVALID_PARAMS = 1,
    /** <No documentation available> */
    PAYMENT_PLAN_RESULT_CALCULATION_ERROR = 2,
}
#ifndef DOXYGEN
;
typedef uint8_t
#endif
    PaymentPlanResult_t;

/** <No documentation available> */
PaymentPlanResult_t
calculate_down_payment_plan(
    DownPaymentParams_t params,
    Vec_DownPaymentResponse_t *out_responses);

/** <No documentation available> */
PaymentPlanResult_t
calculate_payment_plan(
    Params_t params,
    Vec_Response_t *out_responses);

/** <No documentation available> */
void free_down_payment_response_vec(
    Vec_DownPaymentResponse_t value);

/** <No documentation available> */
void free_response_vec(
    Vec_Response_t value);
